User guide
==========

This document contains instructions for end users of Studio.

Installation
------------

Install dependencies
^^^^^^^^^^^^^^^^^^^^

Studio has two types of dependencies: pure Python dependencies, and system
dependencies. Pure Python dependencies will be installed as part of the
installation of Studio. System dependencies, listed below, are installed
separately.

* Python 2.4 or 2.5, Python 2.5 is highly recommended and even required if you
  use Windows (untested with Python 2.6 but it may work)
* MapServer CGI, version 5.0 and higher
* MapServer MapScript Python, version 5.0 and higher
* OGRGDAL Python, version 1.5 and higher

On a Linux system, you can rely on your distribution packages (recommended).
For example, on Debian-like system, you would install the required packages
with::

    $ apt-get install python cgi-mapserver python-mapscript python-gdal

On a Windows system, you would need to install Python 2.5 from
http://www.python.org/download/releases/ and its ``pwin32`` (a.k.a
``win32api``) extension from
http://sourceforge.net/project/showfiles.php?group_id=78018. You would rely on
the MS4W distribution from http://www.maptools.org/ms4w/ for MapServer and
OGRDAL (`2.3.1 <http://www.maptools.org/dl/ms4w/ms4w-2.3.1-setup.exe>`_ is the
current stable version).

On a Debian system, you can check that MapServer CGI is correctly installed by
testing the following URL in a browser::

    $ http://localhost/cgi-bin/mapserv

Install Studio
^^^^^^^^^^^^^^

Start by creating a folder named ``studio``, at the location of your choice.
This folder will contain your installation of Studio

You can now download the Studio installation script from
http://dev.camptocamp.com/packages/mapfish/go-studio.py. Place this
script in the ``studio`` folder.

Now open a console, go into the ``studio`` folder and execute the
``go-studio.py`` script there. You would use the following on a Unix system::

    $ python go-studio.py venv

and the following on a Windows system::

    C:\studio> C:\Python25\python.exe go-studio.py venv

In the above command it is assumed that your ``studio`` folder is directly
under ``C:\', it also assumes that Python is installed ``C:\Python25``, which
is the default.

``venv`` is the name of the virtual Python environment Studio will be installed
in. Do not worry if you don't know what a virtual Python environment is, you
don't need to understand that to complete the installation.

Before going to the next section, you must activate the virtual environment.
Use the following on a Unix system::

    $ source venv/bin/activate

and the following on a Windows system::

    C:\studio> venv\Scripts\activate.bat

If you use Python 2.5 (enter ``python -V`` in a console to check) you're done
with the installation, you can go directly to the next section.

If you use Python 2.4, you need to install the ``pysqlite`` package as it is
not distributed with Python 2.4. On Unix do::

    $ easy_install pysqlite

On Windows download
http://www.pylonshq.com/download/0.9.7/pysqlite-2.4.1.win32-py2.4.exe and
execute it.

Create config
^^^^^^^^^^^^^

Now that Studio is installed it is time that you create your Studio
configuration.

On Unix use::

    (env) $ paster make-config Studio my_studio.ini

On Windows use:

    (env) C:\studio> paster.exe make-config Studio my_studio.ini

You will be asked for a database URL, Studio indeed requires a database for its
own use. If you just press "Enter", a default sqlite database will be created
for you.

You are done!

Feel free to adjust your newly created ``my_studio.ini`` configuration file to
your needs.

If you want to configure Studio with a PostgreSQL database, you will set
``sqlalchemy.url`` to something like
``postgres://user:password@host:port/dbname``, where ``user`` is the username,
``password`` the password, ``host`` the name of the host executing PostgreSQL,
and ``dbname`` the name of the database. Look at the `postgreSQL documentation
<http://www.postgresql.org/docs/>`_ to learn `how to create a new database
<http://www.postgresql.org/docs/8.3/static/manage-ag-createdb.html>`__.  You
will also need to install the ``psycopg2`` package in the Python virtual
environment. On a Unix system::

    (env) $ easy_install psycopg2

Set up
^^^^^^

You now need to set up Studio, which means creating the database schema and
insert initial data. 

Use the following on Unix::

    (env) $ paster setup-app my_studio.ini

and the following on Windows::

    (env) C:\studio> paster.exe setup-app my_studio.ini

Start up
^^^^^^^^

Studio is now ready, let's start it!

On Unix::

    (env) $ paster serve my_studio.ini

On Windows::

    (env) C:\studio> paster.exe serve my_studio.ini

Two user accounts were created (when running ``setup-app``):

* ``admin`` is the master user. He has all permissions.
    * login: ``admin``
    * password: ``password``
* ``enduser`` is a standard user. He has all permissions except those to add/update/view datastores.
    * login: ``enduser``
    * password: ``password``

Work with Studio
----------------

This section provides some basic information about how to use Studio.

The Studio components
^^^^^^^^^^^^^^^^^^^^^

The Studio user interface is divided into two functional parts:

* Data: for the management of data stored as files in a directory or as tables
  in a PostGIS database
* Mapfile: for the creation of MapServer Mapfiles

.. image:: images/studio_full_view.png

Work with Data Manager
^^^^^^^^^^^^^^^^^^^^^^

Per default, two datastores are created:

* a PostGIS datastore: allow the user to store spatial data in a PostGIS database.
* a directory datastore: alow the user to use data as geospatial files (currently
  supported formats: ESRI shapefile and raster georeferenced files).

How to import shapefiles in Studio ?
""""""""""""""""""""""""""""""""""""

The procedure is the following::

        Select the "default (directory)" datastore
        Choose "Add a new datasource..." function
        Browse your filesystem to select a zip file containing the shapefile files (.shp, .dbf, .shx and .prj at least)
        and your file are uploaded to the server

Work with Mapfile Manager
^^^^^^^^^^^^^^^^^^^^^^^^^

How to create a new Mapfile ?
"""""""""""""""""""""""""""""

    The procedure is the following::

        Click on the "Create new mapfile..." function
        Select the "Global properties panel"
        Define a name for the mapfile
        Define a Projection (for example "+init=epsg:2154" for RGF_1993_Lambert_93 or "+init=epsg:21781" for CH1903_LV03)
        Define the image color (background color)
        And the extent of interest

**Hint**

   ``The Mapfile properties are very well documented here:`` http://www.mapserver.org/mapfile/index.html#mapfile

**Hint**

   ``Avoid special character for Mapfile name.``

**Hint**

   ``Always click on "Save mapfile" to observe the result of your modifications.``

How to create a new layer in the Mapfile ?
""""""""""""""""""""""""""""""""""""""""""

    The procedure is the following::

        Click on the "Create new layer..." function
        Choose a datastore (per default: "default (directory)" or "default (postgis)").
        You find then in the data source list the data you imported previously and the sample data provided with Studio. Select one dataset.
        Then you should see the data in the map viewer

.. image:: images/studio_mapfile_add_layer.png

**Hint**

   ``All the layers of a Mapfile have to have different names, otherwise MapServer can't recognize them and will not be able to create maps.``

How to classify data based on attribute values ?
""""""""""""""""""""""""""""""""""""""""""""""""

    The procedure is the following::

        Hover the desired layer and click on the "Classifiy using wizard" icon on the right.
        Follow the classification wizard: select an attribute, select the classification process (quantile or unique value), define symbology...
        ... and click on classify. Studio will generate the classes.
        Save the Mapfile and you can see the result in the map preview

.. image:: images/studio_mapfile_classification_wizard.png

**Hint**

   ``Don't forget to "Save mapfile" to see the result of the classification.``

How to define advanced class symbology ?
""""""""""""""""""""""""""""""""""""""""

    The procedure is the following::

        Select a class
        You have the possibility to modify existing style or to add new style (like fill or stroke, buttons on the bottom)

.. image:: images/studio_mapfile_class_editor.png    
